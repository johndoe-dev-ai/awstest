import jaydebeapi
import boto3

# Initialize a Boto3 session using default credentials
session = boto3.Session()
credentials = session.get_credentials().get_frozen_credentials()

# Extract AWS credentials
aws_access_key_id = credentials.access_key
aws_secret_access_key = credentials.secret_key
aws_session_token = credentials.token  # Needed if using temporary credentials

# JDBC driver class and path
jdbc_driver_name = 'com.amazon.redshift.jdbc42.Driver'
jdbc_driver_path = '/path/to/AwsRedshiftJDBC42-2.1.0.9.jar'  # Update with your driver path

# Redshift cluster details
cluster_endpoint = '<your-cluster-endpoint>'  # e.g., 'redshift-cluster-1.abc123xyz.us-west-2.redshift.amazonaws.com'
database_name = '<database-name>'
port = 5439  # Default Redshift port
iam_db_user = '<your-iam-db-user>'  # The IAM user mapped to a database user

# Build the JDBC URL
jdbc_url = f'jdbc:redshift:iam://{cluster_endpoint}:{port}/{database_name}'

# Connection properties
connection_properties = {
    'AccessKeyID': aws_access_key_id,
    'SecretAccessKey': aws_secret_access_key,
    'SessionToken': aws_session_token,
    'DbUser': iam_db_user,
    'ssl': 'true',
    # 'DbGroups': 'group1,group2',  # Optional: Specify DB groups if needed
    # 'EndpointUrl': '<vpc-endpoint-url>',  # Optional: Specify VPC endpoint if required
}

# Convert properties to list format expected by JayDeBeApi
conn_args = [jdbc_url, connection_properties]

# Establish the connection
conn = jaydebeapi.connect(
    jdbc_driver_name,
    conn_args,
    jars=jdbc_driver_path
)

# Create a cursor object
cursor = conn.cursor()

# Execute a query
cursor.execute("SELECT * FROM your_table LIMIT 5")

# Fetch and print the results
results = cursor.fetchall()
for row in results:
    print(row)

# Close the cursor and the connection
cursor.close()
conn.close()
